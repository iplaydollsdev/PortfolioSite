@page "/adminpage"
@using System.Xml.Serialization;
@using Microsoft.AspNetCore.Identity
@using OfficeOpenXml;

@inject ICategory categoryData
@inject IProduct productData
@inject IConfiguration config
@inject IEmailSender emailSender

@inject AuthenticationStateProvider authenticationStateProvider
@inject SignInManager<UserModel> signInManager
@inject UserManager<UserModel> userManager

@attribute [Authorize(Policy = "AdminPolicy")]

<PageTitle>Страница Админа</PageTitle>
<style>
    body {
        background: -webkit-linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%);
        background: linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%);
    }
</style>

<h1 class="admin-header">Страница Админа</h1>

<div>
    <div style="display: flex; justify-content: space-around; padding: 1rem">
        <a class="button-bordered add-button" href="/product/add" role="button"><span> 
            <i class="oi oi-plus cat-icon"></i> Добавить приложение</span>
        </a>
    </div>
</div>

<div class="category-tabs container-fluid">
    <div class="row">
        <div class="col category-item">
            <button class="button-bordered btn-category" role="button" @onclick="@(e => ExportToXml())" disabled="@isSending">
                <span> <i class="oi oi-envelope-closed cat-icon"></i> Экспортировать в XML</span>
            </button>
        </div>
        <div class="col category-item">
            <button class="button-bordered btn-category" role="button" @onclick="@(e => ExportToExcel())" disabled="@isSending">
                <span> <i class="oi oi-envelope-closed cat-icon"></i> Экспортировать в Excel</span>
            </button>
        </div>
    </div>
</div>


<div class="category-tabs container-fluid">
    <div class="row">
        <div class="col category-item">
            <button class="@((selectedCategory == "Десктопные приложения") ? "button-bordered btn-category active" : "button-bordered btn-category")" role="button" @onclick='(() => SelectCategory("Десктопные приложения"))'>
                <span> <i class="oi oi-monitor cat-icon"></i> Десктопные приложения</span>
            </button>
        </div>
        <div class="col category-item">
            <button class="@((selectedCategory == "Мобильные приложения") ? "button-bordered btn-category active" : "button-bordered btn-category")" role="button" @onclick='(() => SelectCategory("Мобильные приложения"))'>
                <span> <i class="oi oi-phone cat-icon"></i> Мобильные приложения</span>
            </button>
        </div>
        <div class="col category-item">
            <button class="@((selectedCategory == "Web-приложения") ? "button-bordered btn-category active" : "button-bordered btn-category")" role="button" @onclick='(() => SelectCategory("Web-приложения"))'>
                <span> <i class="oi oi-globe cat-icon"></i> Web-приложения</span>
            </button>
        </div>
    </div>
</div>

<section>
    @foreach (var c in categories.Where(c => string.IsNullOrWhiteSpace(selectedCategory) || c.CategoryName == selectedCategory))
    {
    <div>
        <h2 class="admin-header">@c.CategoryName</h2>
    </div>
    <div class="tbl-header">
        <table cellpadding="0" cellspacing="0" border="0">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Название</th>
                    <th>Описание</th>
                    <th>Цена</th>
                    <th>Картинка</th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </div>
    <div class="tbl-content">
        <table cellpadding="0" cellspacing="0" border="0">
            <tbody>
                @foreach (var p in products.Where(p => p.Category == c.CategoryName).ToList())
                    {
                    <tr>
                        <td>@p.Id</td>
                        <td>@p.Name</td>
                        <td>@p.Description</td>
                        <td>@p.Price</td>
                        <td>
                            <img src="@p.Image" width="200" />
                        </td>
                        <td>
                            <div class="control-buttons">
                                <a class="button-bordered" href="/product/edit/@p.Id" role="button">
                                    <span> <i class="oi oi-pencil cat-icon"></i> Изменить</span>
                                    </a>
                                <button id="delete" class="button-bordered" @onclick="@(e => DeleteProduct(p))" role="button">
                                    <span> <i class="oi oi-trash cat-icon"></i> Удалить</span>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    }
</section>


@code{
    bool isSending = false;
    string selectedCategory = string.Empty;
    private List<ProductModel> products = new();
    private List<CategoryModel> categories = new();

    protected override async Task OnInitializedAsync()
    {
        products = await productData.GetAllProducts();
        categories = await categoryData.GetCategories();
    }

    private void SelectCategory(string category)
    {
        if (category == selectedCategory)
        {
            selectedCategory = string.Empty;
        }
        else
        {
            selectedCategory = category;
        }
    }

    private async void DeleteProduct(ProductModel p)
    {
        await productData.DeleteProduct(p);
        products.Remove(p);
        StateHasChanged();
    }

    private async Task ExportToXml()
    {
        isSending = true;
        if (string.IsNullOrWhiteSpace(selectedCategory) == false)
        {
            products = await productData.GetProductsByCategory(categories.Where(c => c.CategoryName == selectedCategory).FirstOrDefault() ?? new CategoryModel());
        }
        else
        {
            products = await productData.GetAllProducts();
        }

        var serializer = new XmlSerializer(typeof(List<ProductModel>));
        using (var fs = new FileStream("Products.xml", FileMode.Create))
        {
            serializer.Serialize(fs, products);

            await fs.DisposeAsync();
        }
        using (var attachmentFile = new System.Net.Mail.Attachment("Products.xml"))
        {
            var email = await GetUseremail();
            await emailSender.SendEmailWithFileAsync(email, subject: "XML", htmlMessage: "Запрашиваемый файл", attachmentFile);
        }

        isSending = false;
    }

    public async Task ExportToExcel()
    {
        isSending = true;
        if (string.IsNullOrWhiteSpace(selectedCategory) == false)
        {
            products = await productData.GetProductsByCategory(categories.Where(c => c.CategoryName == selectedCategory).FirstOrDefault() ?? new CategoryModel());
        }
        else
        {
            products = await productData.GetAllProducts();
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Products");

            worksheet.Cells[1, 1].Value = "Id";
            worksheet.Cells[1, 2].Value = "Название";
            worksheet.Cells[1, 3].Value = "Описание";
            worksheet.Cells[1, 4].Value = "Цена";
            worksheet.Cells[1, 5].Value = "Категория";

            for (int i = 0; i < products.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = products[i].Id;
                worksheet.Cells[i + 2, 2].Value = products[i].Name;
                worksheet.Cells[i + 2, 3].Value = products[i].Description;
                worksheet.Cells[i + 2, 4].Value = products[i].Price;
                worksheet.Cells[i + 2, 5].Value = products[i].Category;
            }

            using (var fs = new FileStream("Products.xlsx", FileMode.Create))
            {
                package.SaveAs(fs);
                await fs.DisposeAsync();
            }
            using (var attachmentFile = new System.Net.Mail.Attachment("Products.xlsx"))
            {
                var email = await GetUseremail();
                await emailSender.SendEmailWithFileAsync(email, subject: "XLSX", htmlMessage: "Запрашиваемый файл", attachmentFile);
            }

        }

        isSending = false;
    }

    private async Task<string> GetUseremail() 
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User as System.Security.Claims.ClaimsPrincipal;
        var email = claimsPrincipal?.Identity?.Name ?? "";

        return email;
    }
}

