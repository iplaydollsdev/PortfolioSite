@page "/adminpage"
@using System.Xml.Serialization;
@using Microsoft.AspNetCore.Identity
@using OfficeOpenXml;

@inject ICategory categoryData
@inject IProduct productData
@inject IConfiguration config
@inject IEmailSender emailSender

@inject AuthenticationStateProvider authenticationStateProvider
@inject SignInManager<UserModel> signInManager
@inject UserManager<UserModel> userManager

@attribute [Authorize(Policy = "AdminPolicy")]

<PageTitle>Страница Админа</PageTitle>
<style>
    body {
        background: -webkit-linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%);
        background: linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%);
    }
</style>

<h1 class="admin-header">Страница Админа</h1>

<section style="display:flex">
    <div class="filter">
        <div class="tbl-header">
             <table cellpadding="0" cellspacing="0" border="0">
                <thead>
                    <tr>
                        <th class="first-column">Фильтр</th>
                    </tr>
                </thead>
            </table>
        </div>
        <div class="tbl-content" style="height: 21.1rem">
        <table cellpadding="0" cellspacing="0" border="0">
            <tbody>
                <tr>
                    <td class="first-column">
                         <label for="filter-id">Id:</label>
                    </td>
                    <td>
                            <div class="price-input">
                                <div class="field">
                                    <span>От</span>
                                    <input type="number" class="input-min" min="@GetMinId()" max="@GetMaxId()" step="1" @bind-value="FilterIdMin">
                                </div>
                                <div class="separator"></div>
                                <div class="field">
                                    <span>До</span>
                                    <input type="number" class="input-max" min="@GetMinId()" max="@GetMaxId()" step="1" @bind-value="FilterIdMax">
                                </div>
                            </div>
                            <div class="slider">
                                <div class="progress" style="left: @GetPercent(GetMaxId(), GetMinId(), FilterIdMin); right: @GetPercent(GetMaxId(), GetMinId(), FilterIdMax, true)"></div>
                            </div>
                            <div class="filter-item range-input">
                                <input type="range" class="range-min" id="filter-id-min" min="@GetMinId()" max="@GetMaxId()" step="1" @bind-value="FilterIdMin">
                                <input type="range" class="range-max" id="filter-id-max" min="@GetMinId()" max="@GetMaxId()" step="1" @bind-value="FilterIdMax">
                            </div>
                    </td>
                </tr>
                <tr>
                    <td class="first-column">
                        <label for="filter-name" >Название:</label>
                    </td>
                    <td>
                        <div class="filter-item">
                            <input type="text" id="filter-name" @bind-value="filterName">
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="first-column">
                        <label for="filter-price">Цена:</label>
                    </td>
                    <td>
                        <div class="price-input">
                            <div class="field">
                                <span>От</span>
                                <input type="number" class="input-min" min="@GetMinPrice()" max="@GetMaxPrice()" step="10" @bind-value="FilterPriceMin">
                            </div>
                            <div class="separator"></div>
                            <div class="field">
                                <span>До</span>
                                <input type="number" class="input-max" min="@GetMinPrice()" max="@GetMaxPrice()" step="10" @bind-value="FilterPriceMax">
                            </div>
                        </div>
                        <div class="slider">
                            <div class="progress" style="left: @GetPercent(GetMaxPrice(), GetMinPrice(), FilterPriceMin); right: @GetPercent(GetMaxPrice(), GetMinPrice(), FilterPriceMax, true)"></div>
                        </div>
                        <div class="filter-item range-input">
                            <input type="range" class="range-min" id="filter-price-min" min="@GetMinPrice()" max="@GetMaxPrice()" step="10" @bind-value="FilterPriceMin">
                            <input type="range" class="range-max" id="filter-price-max" min="@GetMinPrice()" max="@GetMaxPrice()" step="10" @bind-value="FilterPriceMax">
                        </div>
                    </td>
                </tr>
                <tr>
                        <td class="first-column">
                        <label for="filter-category">Категория:</label>
                    </td>
                    <td>
                        <div class="filter-item">
                            <select id="filter-category" @bind="filterCategory">
                                <option value="Все">Все</option>
                                <option value="Десктопные приложения">Десктопные приложения</option>
                                <option value="Мобильные приложения">Мобильные приложения</option>
                                <option value="Web-приложения">Web-приложения</option>
                            </select>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        Товаров: @filteredProducts.Count
                    </td>
                    <td>
                        <button class="filter-button" @onclick="Filter">Применить</button>
                        <button class="filter-button" @onclick="DropFilter">Сбросить</button>
                    </td>
                </tr>
                <tr>
                </tr>
            </tbody>
        </table>
        </div>
    </div>

    <div class="admin-buttons">
        <div>
            <div>
                <a class="button-admin add-button" href="/product/add" role="button">
                    <span>
                        <i class="oi oi-plus cat-icon"></i> Добавить приложение
                    </span>
                </a>
                <button class="button-admin add-button" role="button" @onclick="@(e => ExportToXml())" disabled="@isSending">
                    <span> <i class="oi oi-envelope-closed cat-icon"></i> Экспортировать в XML</span>
                </button>
                <button class="button-admin add-button" role="button" @onclick="@(e => ExportToExcel())" disabled="@isSending">
                    <span> <i class="oi oi-envelope-closed cat-icon"></i> Экспортировать в Excel</span>
                </button>
            </div>
        </div>
    </div>
</section>
<section>
    <div class="tbl-header">
        <table cellpadding="0" cellspacing="0" border="0">
            <thead>
                <tr>
                    <th style="width: 5%">Id</th>
                    <th style ="width: 20%">Название</th>
                    <th style ="width: 30%">Описание</th>
                    <th style="width: 12%">Категория</th>
                    <th style="width: 10%">Цена</th>
                    <th style="width: 13%">Картинка</th>
                    <th style="width: 10%"></th>
                </tr>
            </thead>
        </table>
    </div>
    <div class="tbl-content">
        <table cellpadding="0" cellspacing="0" border="0">
            <tbody>
                @foreach (var p in filteredProducts.ToList())
                    {
                    <tr>
                        <td style ="width: 5%">@p.Id</td>
                        <td style="width: 20%">@p.Name</td>
                        <td style="width: 30%">@p.Description</td>
                        <td style="width: 12%">@p.Category</td>
                        <td style="width: 10%">@p.Price</td>
                        <td style="width: 13%">
                            <img src="@p.Image" width="200" />
                        </td>
                        <td style="width: 10%">
                            <div class="control-buttons">
                                <a class="button-admin" href="/product/edit/@p.Id" role="button">
                                    <span> <i class="oi oi-pencil cat-icon"></i> Изменить</span>
                                    </a>
                                <button id="delete" class="button-admin" @onclick="@(e => DeleteProduct(p))" role="button">
                                    <span> <i class="oi oi-trash cat-icon"></i> Удалить</span>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    @*}*@
</section>
<div class="mobile-overlay">
    <h1>Страница недоступна в мобильном виде</h1>
    <a class="button-bordered" href="/" role="button">
        <span>
            <i class="oi oi-arrow-left cat-icon"></i> Назад
        </span>
    </a>
</div>

@code{
    bool isSending = false;
    string selectedCategory = string.Empty;
    private List<ProductModel> products = new();
    private List<ProductModel> filteredProducts = new();
    private List<CategoryModel> categories = new();

    private string filterName = string.Empty;
    private string filterCategory = "Все";

    private int filterIdMin = 0;
    private int filterIdMax;
    public int FilterIdMin {
        get { return filterIdMin; }
        set
        {
            if (value < filterIdMax)
            {
                filterIdMin = value;
            }
            else
            {
                filterIdMin = filterIdMax - 1;
            }
        } 
    }
    public int FilterIdMax
    {
        get { return filterIdMax; }
        set
        {
            if (value > filterIdMin)
            {
                filterIdMax = value;
            }
            else
            {
                filterIdMax = filterIdMin + 1;
            }
        }
    }

    private int filterPriceMin = 0;
    private int filterPriceMax;
    public int FilterPriceMin
    {
        get { return filterPriceMin; }
        set
        {
            if (value < filterPriceMax)
            {
                filterPriceMin = value;
            }
            else
            {
                filterPriceMin = filterPriceMax - 10;
            }
        }
    }
    public int FilterPriceMax
    {
        get { return filterPriceMax; }
        set
        {
            if (value > filterPriceMin)
            {
                filterPriceMax = value;
            }
            else
            {
                filterPriceMax = filterPriceMin + 10;
            }
        }
    }



    protected override async Task OnInitializedAsync()
    {
        products = await productData.GetAllProducts();
        categories = await categoryData.GetCategories();
        DropFilter();
    }

    private void DropFilter()
    {
        filteredProducts = products;
        filterIdMin = GetMinId();
        filterIdMax = GetMaxId();
        filterPriceMin = GetMinPrice();
        filterPriceMax = GetMaxPrice();
    }

    private void Filter()
    {
        if (string.IsNullOrWhiteSpace(filterCategory) || filterCategory == "Все")
        {
            filteredProducts = products.Where(i => i.Id >= filterIdMin && i.Id <= filterIdMax)
                                        .Where(p => p.Price >= filterPriceMin && p.Price <= filterPriceMax)
                                        .Where(n => n.Name.Contains(filterName, StringComparison.InvariantCultureIgnoreCase))
                                        .ToList();
        }
        else
        {
            filteredProducts = products.Where(i => i.Id >= filterIdMin && i.Id <= filterIdMax)
                                        .Where(c => c.Category == filterCategory)
                                        .Where(p => p.Price >= filterPriceMin && p.Price <= filterPriceMax)
                                        .Where(n => n.Name.Contains(filterName, StringComparison.InvariantCultureIgnoreCase))
                                        .ToList();
        }
    }

    private async void DeleteProduct(ProductModel p)
    {
        await productData.DeleteProduct(p);
        products.Remove(p);
        DropFilter();
        StateHasChanged();
    }

    #region Export
    private async Task ExportToXml()
    {
        isSending = true;
        if (string.IsNullOrWhiteSpace(selectedCategory) == false)
        {
            products = await productData.GetProductsByCategory(categories.Where(c => c.CategoryName == selectedCategory).FirstOrDefault() ?? new CategoryModel());
        }
        else
        {
            products = await productData.GetAllProducts();
        }

        var serializer = new XmlSerializer(typeof(List<ProductModel>));
        using (var fs = new FileStream("Products.xml", FileMode.Create))
        {
            serializer.Serialize(fs, products);

            await fs.DisposeAsync();
        }
        using (var attachmentFile = new System.Net.Mail.Attachment("Products.xml"))
        {
            var email = await GetUseremail();
            await emailSender.SendEmailWithFileAsync(email, subject: "XML", htmlMessage: "Запрашиваемый файл", attachmentFile);
        }

        isSending = false;
    }

    public async Task ExportToExcel()
    {
        isSending = true;
        if (string.IsNullOrWhiteSpace(selectedCategory) == false)
        {
            products = await productData.GetProductsByCategory(categories.Where(c => c.CategoryName == selectedCategory).FirstOrDefault() ?? new CategoryModel());
        }
        else
        {
            products = await productData.GetAllProducts();
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Products");

            worksheet.Cells[1, 1].Value = "Id";
            worksheet.Cells[1, 2].Value = "Название";
            worksheet.Cells[1, 3].Value = "Описание";
            worksheet.Cells[1, 4].Value = "Цена";
            worksheet.Cells[1, 5].Value = "Категория";

            for (int i = 0; i < products.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = products[i].Id;
                worksheet.Cells[i + 2, 2].Value = products[i].Name;
                worksheet.Cells[i + 2, 3].Value = products[i].Description;
                worksheet.Cells[i + 2, 4].Value = products[i].Price;
                worksheet.Cells[i + 2, 5].Value = products[i].Category;
            }

            using (var fs = new FileStream("Products.xlsx", FileMode.Create))
            {
                package.SaveAs(fs);
                await fs.DisposeAsync();
            }
            using (var attachmentFile = new System.Net.Mail.Attachment("Products.xlsx"))
            {
                var email = await GetUseremail();
                await emailSender.SendEmailWithFileAsync(email, subject: "XLSX", htmlMessage: "Запрашиваемый файл", attachmentFile);
            }

        }

        isSending = false;
    }
    #endregion

    private async Task<string> GetUseremail() 
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User as System.Security.Claims.ClaimsPrincipal;
        var email = claimsPrincipal?.Identity?.Name ?? "";

        return email;
    }

    private int GetMaxId()
    {
        if (products.Count > 0)
        {
            return products.Max(p => p.Id);
        }
        else
        {
            return 0;
        }
    }
    private int GetMinId()
    {
        if (products.Count > 0)
        {
            return products.Min(p => p.Id);
        }
        else
        {
            return 0;
        }
    }

    private int GetMaxPrice()
    {
        if (products.Count > 0)
        {
            return (int)products.Max(p => p.Price);
        }
        else
        {
            return 0;
        }
    }
    private int GetMinPrice()
    {
        if (products.Count > 0)
        {
            return (int)products.Min(p => p.Price);
        }
        else
        {
            return 0;
        }
    }

    private string GetPercent(int max, int min, int number, bool invert = false)
    {
        if (max != 0)
        {
            decimal dec = ((decimal)number - min) / ((decimal)max - min);
            if (invert)
            {
                return (100 - (int)(dec * 100)).ToString() + "%";
            }
            return ((int)(dec * 100)).ToString() + "%";
        }
        return "0%";

    }
}

