@page "/adminpage"
@using System.Xml.Serialization;
@using Microsoft.AspNetCore.Identity
@using OfficeOpenXml;

@inject ICategory categoryData
@inject IProduct productData
@inject IConfiguration config
@inject IEmailSender emailSender

@inject AuthenticationStateProvider authenticationStateProvider
@inject SignInManager<UserModel> signInManager
@inject UserManager<UserModel> userManager

@attribute [Authorize(Policy = "AdminPolicy")]

<PageTitle>Каталог</PageTitle>

<h3>Страница Админа</h3>

<div>
    <div>
        <a class="btn btn-primary btn-sm" href="/product/add" role="button">Добавить</a>
    </div>
</div>
<div>
    <label for="category">Категория:</label>
    <select id="category" @onchange="@(e => selectedCategory = e?.Value?.ToString() ?? "")">
        <option value="">Все</option>
        @foreach (var c in categories)
        {
            <option value="@c.CategoryName">@c.CategoryName</option>
        }
    </select>
</div>
<div>
    @if (isSending == false)
    {
        <button @onclick="@(e => ExportToXml())">Экспортировать в XML</button>
    }
    else
    {
        <button>Отправляем...</button>
    }
</div>
<div>
    @if (isSending == false)
    {
        <button @onclick="@(e => ExportToExcel())">Экспортировать в Excel</button>
    }
    else
    {
        <button>Отправляем...</button>
    }
</div>


@foreach (var c in categories.Where(c => string.IsNullOrWhiteSpace(selectedCategory) || c.CategoryName == selectedCategory))
{
<div>
    @c.CategoryName
</div>
<table class="table table-bordered table-striped table-sm">
    <thead>
        <tr>
            <th>Id</th>
            <th>Название</th>
            <th>Описание</th>
            <th>Цена</th>
            <th>Картинка</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var p in products.Where(p => p.Category == c.CategoryName).ToList())
            {
            <tr>
                <td>@p.Id</td>
                <td>@p.Name</td>
                <td>@p.Description</td>
                <td>@p.Price</td>
                <td>
                    <img src="@p.Image" width="200" />
                </td>
                <td class="text-right">
                    <a class="btn btn-primary btn-sm" href="/product/detail/@p.Id" role="button">Детали</a>
                    <a class="btn btn-secondary btn-sm" href="/product/edit/@p.Id" role="button">Изменить</a>
                    <button class="btn btn-danger btn-sm" @onclick="@(e => DeleteProduct(p))" role="button">Удалить</button>
                </td>
            </tr>
        }
    </tbody>
</table>
}


@code{
    bool isSending = false;
    string selectedCategory = string.Empty;
    private List<ProductModel> products = new();
    private List<CategoryModel> categories = new();

    protected override async Task OnInitializedAsync()
    {
        products = await productData.GetAllProducts();
        categories = await categoryData.GetCategories();
    }

    private async void DeleteProduct(ProductModel p)
    {
        await productData.DeleteProduct(p);
        products.Remove(p);
        StateHasChanged();
    }

    private async Task ExportToXml()
    {
        isSending = true;
        if (string.IsNullOrWhiteSpace(selectedCategory) == false)
        {
            products = await productData.GetProductsByCategory(categories.Where(c => c.CategoryName == selectedCategory).FirstOrDefault() ?? new CategoryModel());
        }
        else
        {
            products = await productData.GetAllProducts();
        }

        var serializer = new XmlSerializer(typeof(List<ProductModel>));
        using (var fs = new FileStream("Products.xml", FileMode.Create))
        {
            serializer.Serialize(fs, products);

            await fs.DisposeAsync();
        }
        using (var attachmentFile = new System.Net.Mail.Attachment("Products.xml"))
        {
            var email = await GetUseremail();
            await emailSender.SendEmailWithFileAsync(email, subject: "XML", htmlMessage: "Запрашиваемый файл", attachmentFile);
        }

        isSending = false;
    }

    public async Task ExportToExcel()
    {
        isSending = true;
        if (string.IsNullOrWhiteSpace(selectedCategory) == false)
        {
            products = await productData.GetProductsByCategory(categories.Where(c => c.CategoryName == selectedCategory).FirstOrDefault() ?? new CategoryModel());
        }
        else
        {
            products = await productData.GetAllProducts();
        }

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Products");

            worksheet.Cells[1, 1].Value = "Id";
            worksheet.Cells[1, 2].Value = "Название";
            worksheet.Cells[1, 3].Value = "Описание";
            worksheet.Cells[1, 4].Value = "Цена";
            worksheet.Cells[1, 5].Value = "Категория";

            for (int i = 0; i < products.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = products[i].Id;
                worksheet.Cells[i + 2, 2].Value = products[i].Name;
                worksheet.Cells[i + 2, 3].Value = products[i].Description;
                worksheet.Cells[i + 2, 4].Value = products[i].Price;
                worksheet.Cells[i + 2, 5].Value = products[i].Category;
            }

            using (var fs = new FileStream("Products.xlsx", FileMode.Create))
            {
                package.SaveAs(fs);
                await fs.DisposeAsync();
            }
            using (var attachmentFile = new System.Net.Mail.Attachment("Products.xlsx"))
            {
                var email = await GetUseremail();
                await emailSender.SendEmailWithFileAsync(email, subject: "XLSX", htmlMessage: "Запрашиваемый файл", attachmentFile);
            }

        }

        isSending = false;
    }

    private async Task<string> GetUseremail() 
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User as System.Security.Claims.ClaimsPrincipal;
        var email = claimsPrincipal?.Identity?.Name ?? "";

        return email;
    }


}

