@page "/product/add"
@page "/product/edit/{Id:int}"
@inject NavigationManager NavigationManager
@inject IProduct productData
@inject ICategory categoryData
@inject IConfiguration config

<PageTitle>@Title Товар</PageTitle>
<style>
    body {
        background: -webkit-linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%);
        background: linear-gradient(112.1deg, rgb(32, 38, 57) 11.4%, rgb(63, 76, 119) 70.2%);
    }
</style>

<h1 class="admin-header">@Title Товар</h1>

<hr />
<div class="container">
    <EditForm Model="@product" OnValidSubmit="SaveProduct">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="Name" class="form-label">Название</label>
            <div class="col-md-6">
                <InputText class="form-control" @bind-Value="product.Name" />
            </div>
            <ValidationMessage For="@(() => product.Name)" />
        </div>
        <div class="mb-3">
            <label for="Description" class="form-label">Описание</label>
            <div class="col-md-6">
                <InputTextArea class="form-control" @bind-Value="product.Description" />
            </div>
            <ValidationMessage For="@(() => product.Description)" />
        </div>
        <div class="mb-3">
            <label for="Price" class="form-label">Цена</label>
            <div class="col-md-6">
                <InputNumber class="form-control" @bind-Value="product.Price" step="0.01" />
            </div>
            <ValidationMessage For="@(() => product.Price)" />
        </div>
        <div class="mb-3">
            <label for="Category" class="form-label">Категория</label>
            <div class="col-md-6">
                <div class="pick-radio">
                <InputRadioGroup class="form-control" @bind-Value="product.Category" Name="radio">
                    @if (categories.Count > 0)
                    {
                        <div class="pick-radio-item">
                            <InputRadio Value="categories[0].CategoryName" id="radio-1" checked Name="radio"/> 
                            <label for="radio-1">@categories[0].CategoryName</label>
                        </div>
                        <div class="pick-radio-item">
                            <InputRadio Value="categories[1].CategoryName" id="radio-2" Name="radio"/> 
                            <label for="radio-2">@categories[1].CategoryName</label>
                        </div>
                        <div class="pick-radio-item">
                            <InputRadio Value="categories[2].CategoryName" id="radio-3" Name="radio"/> 
                            <label for="radio-3">@categories[2].CategoryName</label>
                        </div>
                    }
                </InputRadioGroup>
                </div>
            </div>
            <ValidationMessage For="@(() => product.Category)" />
        </div>
        <div class="mb-3">
            <label for="Image" class="form-label">Изображение</label>
            <div>
                @if (String.IsNullOrWhiteSpace(product.Image) == false)
                {
                    <img src="@product.Image" width="200" style="max-width: 200px; max-height: 200px" />
                }
                @if (file is not null) 
                {
                    <i class="oi oi-arrow-right" style="font-size: 5rem; color: lightgray"></i>
                    <img src="@ImageUri" width="200" height="200" style="max-width: 200px; max-height: 200px" />
                }
            </div>
            <div class="col-md-6">
                <InputFile class="pick-file" OnChange="LoadFile" accept=".png,.jpg,.jpeg" />
            </div>
        </div>
        <div class="form-group save-buttons col-md-6">
            <button type="submit" class="button-admin add-button"><span> <i class="oi oi-check cat-icon"></i> Сохранить</span></button>
            <a class="button-admin add-button" href="/adminpage" role="button">
                <span>
                    <i class="oi oi-x cat-icon"></i> Отмена
                </span>
            </a>
        </div>
    </EditForm>

    @if (errors.Count > 0)
    {
        <h2>Errors</h2>
        <ul class="text-danger">
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    }
</div>
@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Добавить";
    protected ProductModel product = new();
    private List<CategoryModel> categories = new();
    private IBrowserFile? file;
    private string? ImageUri;

    private long maxFileSize = 1024 * 1024 * 1;
    private List<string> errors = new();

    protected override async Task OnParametersSetAsync()
    {
        product = await productData.GetProduct(Id);
        categories = await categoryData.GetCategories();

        if (Id != 0)
        {
            Title = "Изменить";
        }
    }
    protected async Task SaveProduct()
    {
        try
        {
            string relativePath = await CaptureFile();

            if (product.Id != 0)
            {
                if (string.IsNullOrWhiteSpace(relativePath) == false) product.Image = relativePath;
                await productData.UpdateProduct(product);
            }
            else
            {
                product.Image = relativePath;
                await productData.AddProduct(product);
            }
            Cancel();
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
    }

    private async void LoadFile(InputFileChangeEventArgs e)
    {
        file = e.File;
        var image = await file.RequestImageFileAsync("image/png", 200, 200);

        using Stream imageStream = image.OpenReadStream(1024 * 1024 * 10);

        using MemoryStream ms = new();
        await imageStream.CopyToAsync(ms);

        ImageUri = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
        StateHasChanged();
    }

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));

            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "productimages/", newFileName);

            string relativePath = Path.Combine("./images/productimages/", newFileName);

            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "productimages/"));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"Your Image cannot be uploaded! Error: {ex.Message}");
            throw;
        }

    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/adminpage");
    }
}